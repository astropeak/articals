#+BLOG: cnblogs
#+POSTID: 6422189
#+DATE: [2017-02-20 Mon 23:51]
#+TITLE: Spring使用 --- 基本概念（二）：AOP，面向方面编程

本文讲述sprint的第二个基本概念： AOP，即面向方面编程
* 什么是面向方面编程
  软件项目中，日志系统等服务系统被核心功能系统调用，日志系统的代码分散在各处。面向方面编程将日志等服务系统独立出来，作为单独一个模块，形成一个“方面”。然后通过一些手段将日志与核心代码再联系起来，叫做“织入”。由此将原来混杂在一起的代码分离成单独的模块，代码质量提高，模块内聚性更高，核心模块专注于处理核心业务流程，而不需要关注不相关的东西，如记录日志、考虑安全等因素。

  通过面向方面编程，模块可以更加独立。只要不是本模块需要做的事情，都可以抽取成为一个“方面”，形成一个新的类。

  几个核心概念：
  1. 通知：
     定义“什么”及“何时”。 “什么”表示这个通知要做什么事情（可以理解成一个函数），“何时”表示这个通知在什么时候被触发。根据“何时”，可将通知分为5种：前置通知、后置通知、返回通知、异常通知、环绕通知。
  2. 切点：
     定义“何处”，表示通知在什么地方被调用。在spring中，都是在函数被调用时调用，因此切点具体定义在哪个包的哪个函数，返回值是何类型、输入参数旭什么类型的函数。
  3. 切面（或方面）：
     切面是通知和切点的集合

  以上例子中，日志系统就是一个切面，切面中的某个函数是通知，并且可以通过配置指定在“何时”，并且将核心系统中的哪个类的哪个方法作为切点，这个通知被触发。

  Sprint只支持在普通函数被调用时的AOP，不支持成员变量被修改时、或构造函数被调用时的AOP。因为Spring实现AOP的方式是通过动态的为核心系统类生成一个代理对象来实现的。但这可覆盖大多数的需求。

 
* 怎样使用
  以一个例子说明。

  待补充。
  
  
* 什么时候使用
  在设计一个类时，考虑某个功能时，问一个问题：这个功能是不是必须要我来做，或者由我来做是否合理。如果不是，则都可以将这个功能抽取出来作为一个切面。这个问题从现实角度（以人的角度）来问，通常也是可行。

  当需要为一个类增加功能时。

  当要修改一个类的功能时。
  
* 好处
  - 更加精细的类划分，类更容易重用
  - 模块更加内聚，只关心自己确实需要做的事务，不相关的事务都可以提取为一个切面独立出来
  - 可以在不修改类定义的情况下，给类增加功能、修改功能