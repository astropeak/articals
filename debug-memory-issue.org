#+DATE: [2016-12-20 Tue 21:15]
#+OPTIONS: toc:t num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: org2blog, emacs
#+TAGS:
#+DESCRIPTION:
#+TITLE: 一次内存不足问题的分析解决经历
本文讲述了嵌入式平台下可执行文件尺寸过大，无法完全加载进内存，从而导致程序启动失败问题的分析解决过程。研究了与可执行文件尺寸相关的编译器参数，研究了可执行文件的各个组成，如text段、data段、bss段的内容，及各个段与代码的对应关系，最终找到了缩小可执行文件尺寸的方法，问题得到解决。

* 问题起因
  随着项目日益增长，功能越加越多，终于在最近一次开发完成，硬件上测试时，发现一个模块无法加载，系统无法正常启动，错误代码为内存不足。这个问题嵌入式开发攻城狮或多或少都遇到过吧。有限的硬件资源无法承载无限增长地软件。难怪手机2年一换，否则就装不下新的系统、软件，呵呵。

  本次的问题在于， 由于内存不足，模块无法被加载进内存。系统中用于加载模块的内存为32M，模块需要被加载进内存才能运行。只能通过缩小模块的二进制文件尺寸来解决了。
* 初次尝试
  首先想到的是通过编译器选项来解决，因为这个方法能够最快看到效果，虽然最终可能不会采取这种方法。

  gcc与二进制尺寸相关的选项有：
 | option  | description                                        |
 |---------+----------------------------------------------------|
 | -g      | 将调试信息保存在二进制文件中                       |
 | -gLevel | 同上，level用于控制数量，数字越大， 保存的数量越多。为0时不保存。  |
 | -Os     | 在二进制尺寸上进行优化                     |
  
 首先试了 ~-Os~ 选项，尺寸只减小了几百字节。 项目的Makefile中使用了 ~-g1~ 选项， 去掉后尺寸也只减小了几百字节。

 后来的分析中发现，即使 去掉 ~-g~ 选项后二进制的尺寸有较大程序减小，这种方法也对当前的问题没有用，因为当前问题是二进制文件被加载进内存的尺寸太大，而不是二进制文件本身尺寸太大。这两者是有区别的。

* 可执行文件分析
** 可执行文件组成
   text段、data, bss等。
   运行时及二进制。
** 缩小各个段的方法
* 再次尝试
  描述解决过程，如何定位到错误变量。
* 解决方案
* inbox
  可能通过objdump分析二进制文件。
  http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/objdump.html
 
  要注意二进制文件本身的大小也load后各个段大小的区别。比如BSS段，在二进制本身中应该是不占用空间的。
